<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="version" value="V40"/>
  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />
  <arg name="config" value="true"/>

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find nao_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
    <arg name="version" value="$(arg version)"/>
  </include>

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find nao_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />
  <arg unless="$(arg config)" name="command_args" value="" />
  <arg     if="$(arg config)" name="command_args" value="-d $(find robocup_launcher)/config/nao_moveit.rviz" />
  <node name="$(anon rviz)" launch-prefix="$(arg launch_prefix)" pkg="rviz" type="rviz" respawn="false" args="$(arg command_args)" output="screen">
    <rosparam command="load" file="$(find nao_moveit_config)/config/kinematics.yaml"/>
  </node>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find nao_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)"/>

  <!-- If needed, broadcast static tf for robot root -->
  <node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 odom base_link 100" />

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="false"/>
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

</launch>
